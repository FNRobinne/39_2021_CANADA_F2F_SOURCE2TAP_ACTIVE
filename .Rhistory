library(tidyverse)
library(sf)
library(dplyr)
library(rgeos)
library(maptools) # warning that this package will be retired by the end of 2023
# By then, I hope the snap function from sf works better
# source("functions/packages.R")       # loads up all the packages we need
## load functions ---------------------------------------------------------
# source("functions/summarise_data.R")
## load data ---------------------------------------------------------------
HYBAS_Fraser <- st_read("02_PROCESSED_DATA/HydroBasin_HUC12_Fraser_Fixed.shp") %>%
st_transform(crs = 3979) %>%
select(HYBAS_ID)
HYRIV_Fraser <- st_read("02_PROCESSED_DATA/HydroRiver_Fraser_Lite.gpkg") # THis is the simplified version of the river network
## Data processing ---------------------------------------------------------
# Create catchment centroids
HYBAS_centroids <- st_centroid(HYBAS_Fraser)
# Creates empty SF to collect results from snap
snap_pts <- HYBAS_centroids %>%
filter(HYBAS_ID == 1) # Dummy filter to get empty structure
for (pt in HYBAS_centroids$HYBAS_ID) {
for (riv in HYRIV_Fraser$HYBAS_L12) {
if (pt == riv) {
pt_vec <- HYBAS_centroids %>%
filter(HYBAS_ID == pt)
riv_vec <- HYRIV_Fraser %>%
filter(HYBAS_L12 == riv)
snappy <- snapPointsToLines(as_Spatial(pt_vec), as_Spatial(riv_vec))
snap_pts <- bind_rows(snap_pts, st_as_sf(snappy))
}
}
}
ggplot()+
geom_sf(HYBAS_centroids, colour = 'blue') +
geom_sf(snap_pts, colour = 'red')
# ESDA
ggplot()+
geom_sf(data = HYBAS_centroids, colour = 'blue') +
geom_sf(data = snap_pts, colour = 'red')
View(snap_pts)
View(snappy)
snap_pts <- HYBAS_centroids %>%
filter(HYBAS_ID == 1) # Dummy filter to get empty structure
for (pt in HYBAS_centroids$HYBAS_ID) {
for (riv in HYRIV_Fraser$HYBAS_L12) {
if (pt == riv) {
pt_vec <- HYBAS_centroids %>%
filter(HYBAS_ID == pt)
riv_vec <- HYRIV_Fraser %>%
filter(HYBAS_L12 == riv)
snappy <- st_snap(pt_vec, riv_vec, tolerance = 2000)
snap_pts <- bind_rows(snap_pts, snappy)
}
}
}
View(snap_pts)
# ESDA
ggplot()+
geom_sf(data = HYBAS_centroids, colour = 'blue') +
geom_sf(data = snap_pts, colour = 'red')
st_write(HYBAS_centroids, "02_PROCESSED_DATA/HYBAS_Fraser_Centroids.gpkg", append = F )
st_write(snappy, "02_PROCESSED_DATA/HYBAS_Fraser_Centroids_Snap.gpkg", append = F)
st_write(snap_pts, "02_PROCESSED_DATA/HYBAS_Fraser_Centroids_Snap.gpkg", append = F)
snap_pts <- HYBAS_centroids %>%
filter(HYBAS_ID == 1) # Dummy filter to get empty structure
for (pt in HYBAS_centroids$HYBAS_ID) {
for (riv in HYRIV_Fraser$HYBAS_L12) {
if (pt == riv) {
pt_vec <- HYBAS_centroids %>%
filter(HYBAS_ID == pt)
riv_vec <- HYRIV_Fraser %>%
filter(HYBAS_L12 == riv)
snappy <- st_snap(pt_vec, riv_vec)
snap_pts <- bind_rows(snap_pts, snappy)
}
}
}
for (pt in HYBAS_centroids$HYBAS_ID) {
for (riv in HYRIV_Fraser$HYBAS_L12) {
if (pt == riv) {
pt_vec <- HYBAS_centroids %>%
filter(HYBAS_ID == pt)
riv_vec <- HYRIV_Fraser %>%
filter(HYBAS_L12 == riv)
snappy <- st_snap(pt_vec, riv_vec, tolerance = 10000)
snap_pts <- bind_rows(snap_pts, snappy)
}
}
}
# ESDA (just checking source and snap result)
ggplot()+
geom_sf(data = HYBAS_centroids, colour = 'blue') +
geom_sf(data = snap_pts, colour = 'red')
st_write(snap_pts, "02_PROCESSED_DATA/HYBAS_Fraser_Centroids_Snap.gpkg", append = F)
# Delete all Strahler order 1 in the original dataset and add back the watersheds with order 1 only
HYRIV_Lite <- HYRIV_Fraser %>%
filter(ORD_STRA > 1) %>%
bind_rows(HYRIV_Stral1) %>%
group_by(HYBAS_L12) %>%
summarize()
# Note: geometry fixed in QGis prior to loading data
HYBAS_Fraser <- st_read("02_PROCESSED_DATA/HydroBasin_HUC12_Fraser_Fixed.shp") %>%
st_transform(crs = 3979)
HYRIV_Fraser <- st_read("02_PROCESSED_DATA/HydroRiver_Fraser_Fixed.shp") %>%
st_transform(crs = 3979) %>%
select(HYRIV_ID, ORD_STRA, HYBAS_L12)
# Data processing ---------------------------------------------------------
# Separate watersheds that only have Strahler order 1
# Create river layer for watersheds with more than Strahler order 1
HYRIV_Stral2Plus <- HYRIV_Fraser %>%
filter(ORD_STRA > 1) %>%
group_by(HYBAS_L12) %>%
summarise(cnt = n())
# Tabulate difference between original river layer and river layer for watersheds with more than Strahler order 1
Diff_Stral2_Stral1 <- anti_join(st_drop_geometry(HYRIV_Fraser), st_drop_geometry(HYRIV_Stral2Plus)) %>%
group_by(HYBAS_L12) %>%
summarise(cnt = n())
# Use previous step to filter original river layer and filter watersheds with only Strahler order 1
HYRIV_Stral1 <-  HYRIV_Fraser %>%
filter(HYBAS_L12 %in% Diff_Stral2_Stral1$HYBAS_L12)
# Delete all Strahler order 1 in the original dataset and add back the watersheds with order 1 only
HYRIV_Lite <- HYRIV_Fraser %>%
filter(ORD_STRA > 1) %>%
bind_rows(HYRIV_Stral1) %>%
group_by(HYBAS_L12) %>%
summarize()
View(HYRIV_Lite)
# Save clean river network
# Modify destination path as needed
st_write(HYRIV_Lite, "02_PROCESSED_DATA/HydroRiver_Fraser_Lite.gpkg", append = F)
HYRIV_Fraser <- st_read("02_PROCESSED_DATA/HydroRiver_Fraser_Lite.gpkg") # THis is the simplified version of the river network
# Creates empty SF to collect results from snap
snap_pts <- HYBAS_centroids %>%
filter(HYBAS_ID == 1) # Dummy filter to get empty structure
for (pt in HYBAS_centroids$HYBAS_ID) {
for (riv in HYRIV_Fraser$HYBAS_L12) {
if (pt == riv) {
pt_vec <- HYBAS_centroids %>%
filter(HYBAS_ID == pt)
riv_vec <- HYRIV_Fraser %>%
filter(HYBAS_L12 == riv)
snappy <- st_snap(pt_vec, riv_vec, tolerance = 10000)
snap_pts <- bind_rows(snap_pts, snappy)
}
}
}
HYBAS_Fraser <- st_read("02_PROCESSED_DATA/HydroBasin_HUC12_Fraser_Fixed.shp") %>%
st_transform(crs = 3979) %>%
select(HYBAS_ID)
HYRIV_Fraser <- st_read("02_PROCESSED_DATA/HydroRiver_Fraser_Lite.gpkg") # THis is the simplified version of the river network
## Data processing ---------------------------------------------------------
# Create catchment centroids
HYBAS_centroids <- st_centroid(HYBAS_Fraser)
# Creates empty SF to collect results from snap
snap_pts <- HYBAS_centroids %>%
filter(HYBAS_ID == 1) # Dummy filter to get empty structure
for (pt in HYBAS_centroids$HYBAS_ID) {
for (riv in HYRIV_Fraser$HYBAS_L12) {
if (pt == riv) {
pt_vec <- HYBAS_centroids %>%
filter(HYBAS_ID == pt)
riv_vec <- HYRIV_Fraser %>%
filter(HYBAS_L12 == riv)
snappy <- st_snap(pt_vec, riv_vec, tolerance = 10000)
snap_pts <- bind_rows(snap_pts, snappy)
}
}
}
# ESDA (just checking source and snap result)
ggplot()+
geom_sf(data = HYBAS_centroids, colour = 'blue') +
geom_sf(data = snap_pts, colour = 'red')
st_write(snap_pts, "02_PROCESSED_DATA/HYBAS_Fraser_Centroids_Snap.gpkg", append = F)
d_sf %>%
mutate(dst = map2_dbl(HYBAS_centroids, HYRIV_Fraser,
~ st_distance(.y, centers_sf %>%
filter(HYBAS_centroids == .x) %>%
pull(geometry))))
d_sf <- snap_pts %>%
mutate(dst = map2_dbl(HYBAS_centroids, HYRIV_Fraser,
~ st_distance(.y, centers_sf %>%
filter(HYBAS_centroids == .x) %>%
pull(geometry))))
d_sf <- snap_pts %>%
mutate(dst = map2_dbl(HYBAS_centroids, HYRIV_Fraser,
~ st_distance(.y, snap_pts %>%
filter(HYBAS_centroids == .x) %>%
pull(geometry))))
snap_pts <- HYBAS_centroids %>%
filter(HYBAS_ID == 1) # Dummy filter to get empty structure
for (pt in HYBAS_centroids$HYBAS_ID) {
for (riv in HYRIV_Fraser$HYBAS_L12) {
if (pt == riv) {
pt_vec <- HYBAS_centroids %>%
filter(HYBAS_ID == pt)
riv_vec <- HYRIV_Fraser %>%
filter(HYBAS_L12 == riv)
nrst <- st_nearest_points(pt_vec, riv_vec)
snappy <- st_cast(nrst, "POINT") [2]
snap_pts <- bind_rows(snap_pts, snappy)
}
}
}
rlang
rlang::last_error()
View(snappy)
snappy
View(snappy)
View(snappy)
View(snap_pts)
as.data.frame(snappy)
View(pt_vec)
for (pt in HYBAS_centroids$HYBAS_ID) {
for (riv in HYRIV_Fraser$HYBAS_L12) {
if (pt == riv) {
pt_vec <- HYBAS_centroids %>%
filter(HYBAS_ID == pt)
riv_vec <- HYRIV_Fraser %>%
filter(HYBAS_L12 == riv)
nrst <- st_nearest_points(pt_vec, riv_vec)
snappy <- st_cast(nrst, "POINT") [2] %>%
mutate(HYBAS_ID = pt_vec$HYBAS_ID)
snap_pts <- bind_rows(snap_pts, snappy)
}
}
}
View(snappy)
# ESDA (just checking source and snap result)
ggplot()+
geom_sf(data = snappy, colour = 'blue') +
geom_sf(data = snap_pts, colour = 'red')
View(snappy)
for (pt in HYBAS_centroids$HYBAS_ID) {
for (riv in HYRIV_Fraser$HYBAS_L12) {
if (pt == riv) {
pt_vec <- HYBAS_centroids %>%
filter(HYBAS_ID == pt)
riv_vec <- HYRIV_Fraser %>%
filter(HYBAS_L12 == riv)
nrst <- st_nearest_points(pt_vec, riv_vec)
snappy <- st_cast(nrst, "POINT") [2] %>%
as.data.frame() %>%
mutate(HYBAS_ID = pt_vec$HYBAS_ID)
snap_pts <- bind_rows(snap_pts, snappy)
}
}
}
View(snap_pts)
# ESDA (just checking source and snap result)
ggplot()+
geom_sf(data = snappy, colour = 'blue') +
geom_sf(data = snap_pts, colour = 'red')
View(snap_pts)
rlang::last_error()
# ESDA (just checking source and snap result)
ggplot()+
geom_sf(data = HYBAS_centroids, colour = 'blue') +
geom_sf(data = snap_pts, colour = 'red')
st_write(snap_pts, "02_PROCESSED_DATA/HYBAS_Fraser_Centroids_Snap.gpkg", append = F)
install.packages("riverdist")
# Export the simplified river network to a shapefile for use in next step
# Riverdist needs the river network in a shapefile format
st_write(HYRIV_Fraser, "02_PROCESSED_DATA/HYBAS_Fraser_Centroids_Snap.shp", append = F)
RivNet_Fraser <- st_read("02_PROCESSED_DATA/HydroRiver_Fraser_Lite.shp") # THis is the simplified version of the river network
ggplot() +
geom_sf(data = RivNet_Fraser, colour = 'blue')
# Riverdist sandbox
# Import river network
HR <- line2network(path=".", layer = "02_PROCESSED_DATA/HydroRiver_Fraser_Lite")
library(riverdist)
# Riverdist sandbox
# Import river network
HR <- line2network(path=".", layer = "02_PROCESSED_DATA/HydroRiver_Fraser_Lite")
# Riverdist sandbox
# Import river network
HR <- line2network(path=".", layer = "02_PROCESSED_DATA/HydroRiver_Fraser_Lite.shp")
# Export the simplified river network to a shapefile for use in next step
# Riverdist needs the river network in a shapefile format
st_write(HYRIV_Fraser, "02_PROCESSED_DATA/HYBAS_Fraser_Network_Lite.shp", append = F)
# Riverdist sandbox
# Import river network
HR <- line2network(path=".", layer = "02_PROCESSED_DATA/HYBAS_Fraser_Network_Lite")
# Update as needed
setwd("D:/PROJECTS/39_2021_CANADA_F2F_SOURCE2TAP_ACTIVE")
# Riverdist sandbox
# Import river network
HR <- line2network(path=".", layer = "02_PROCESSED_DATA/HYBAS_Fraser_Network_Lite")
# Export the simplified river network to a shapefile for use in next step
# Riverdist needs the river network in a shapefile format
st_write(HYRIV_Fraser, "02_PROCESSED_DATA/HydroRiver_Fraser_Lite.shp", append = F)
## ---------------------------
## Script name: RiverNetwork_Simplication.R
##
## Purpose of script: Simplifies the HydroRiver network so it only keeps streams of Strahler order >2,
##                    except in catchments where only order 1 exist—those are kept.
##
## Author: Dr. François-Nicolas Robinne
##
## Date Created: 2021-10-26
##
## Version: 1.0
##
## Copyright (c) François-Nicolas Robinne, 2021
## Email: francois.robinne@nrcan-rncan.gc.ca
##
## ---------------------------
## Notes:
##   This is part of the project Forest To Faucets - Canada
##
## ---------------------------
## set working directory ---------------------------
setwd("D:/PROJECTS/39_2021_CANADA_F2F_SOURCE2TAP_ACTIVE")
## general options ---------------------------
options(scipen = 6, digits = 4) # I prefer to view outputs in non-scientific notation
memory.limit(30000000)     # this is needed on some PCs to increase memory allowance
## load libraries --------------------------------------------------------
library(tidyverse)
library(sf)
# source("functions/packages.R")       # loads up all the packages we need
## load functions --------------------------------------------------------
# source("functions/summarise_data.R")
# Load data ---------------------------------------------------------------
# Note: geometry fixed in QGis prior to loading data
HYBAS_Fraser <- st_read("02_PROCESSED_DATA/HydroBasin_HUC12_Fraser_Fixed.shp") %>%
st_transform(crs = 3979)
HYRIV_Fraser <- st_read("02_PROCESSED_DATA/HydroRiver_Fraser_Fixed.shp") %>%
st_transform(crs = 3979) %>%
select(HYRIV_ID, ORD_STRA, HYBAS_L12)
# Data processing ---------------------------------------------------------
# Separate watersheds that only have Strahler order 1
# Create river layer for watersheds with more than Strahler order 1
HYRIV_Stral2Plus <- HYRIV_Fraser %>%
filter(ORD_STRA > 1) %>%
group_by(HYBAS_L12) %>%
summarise(cnt = n())
# Tabulate difference between original river layer and river layer for watersheds with more than Strahler order 1
Diff_Stral2_Stral1 <- anti_join(st_drop_geometry(HYRIV_Fraser), st_drop_geometry(HYRIV_Stral2Plus)) %>%
group_by(HYBAS_L12) %>%
summarise(cnt = n())
# Use previous step to filter original river layer and filter watersheds with only Strahler order 1
HYRIV_Stral1 <-  HYRIV_Fraser %>%
filter(HYBAS_L12 %in% Diff_Stral2_Stral1$HYBAS_L12)
# Delete all Strahler order 1 in the original dataset and add back the watersheds with order 1 only
HYRIV_Lite <- HYRIV_Fraser %>%
filter(ORD_STRA > 1) %>%
bind_rows(HYRIV_Stral1) %>%
group_by(HYBAS_L12) %>%
summarize()
# ESDA (just checking that process worked)
ggplot() +
geom_sf(data = HYRIV_Lite, colour = "blue") +
geom_sf(data = HYBAS_Fraser, fill = NA)
# Data export -------------------------------------------------------------
# Save clean river network
# Modify destination path as needed
st_write(HYRIV_Lite, "02_PROCESSED_DATA/HydroRiver_Fraser_Lite.gpkg", append = F)
st_write(HYRIV_Lite, "02_PROCESSED_DATA/HydroRiver_Fraser_RD.shp", append = F)
## ---------------------------
## Script name: SnapCatchmentCentroids.R
##
## Purpose of script: Snaps the centroid of each HydroBasin catchment to its corresponding HydroRiver segment
##                    It is essentially a snap-by-attribute tool
##
## Author: Dr. François-Nicolas Robinne
##
## Date Created: 2022-01-07
##
## Version: 1.0
##
## Copyright (c) François-Nicolas Robinne, 2022
## Email: francois.robinne@nrcan-rncan.gc.ca
##
## ---------------------------
## Notes:
##   Starts with the data resulting from 'SimplifyRiverNetwork.R'
##    This is part of the project Forest To Faucets - Canada
## ---------------------------
## set working directory ---------------------------
setwd("D:/PROJECTS/39_2021_CANADA_F2F_SOURCE2TAP_ACTIVE")
## general options ---------------------------
options(scipen = 6, digits = 4) # I prefer to view outputs in non-scientific notation
memory.limit(30000000)     # this is needed on some PCs to increase memory allowance
## load libraries ---------------------------
library(tidyverse)
library(sf)
library(dplyr)
# source("functions/packages.R")       # loads up all the packages we need
## load functions ---------------------------------------------------------
# source("functions/summarise_data.R")
## load data ---------------------------------------------------------------
HYBAS_Fraser <- st_read("02_PROCESSED_DATA/HydroBasin_HUC12_Fraser_Fixed.shp") %>%
st_transform(crs = 3979) %>%
select(HYBAS_ID)
HYRIV_Fraser <- st_read("02_PROCESSED_DATA/HydroRiver_Fraser_Lite.gpkg") # THis is the simplified version of the river network
## Data processing ---------------------------------------------------------
# Create catchment centroids
HYBAS_centroids <- st_centroid(HYBAS_Fraser)
# Creates empty SF to collect results from snap
snap_pts <- HYBAS_centroids %>%
filter(HYBAS_ID == 1) # Dummy filter to get empty structure
# Loop snapping centroids to closest point on the closest river segment
# Process seems convoluted, but st_snap does not return the desired output
# The tool gets the nearest point, casts it, and add the ID of the corresponding HYBAS
for (pt in HYBAS_centroids$HYBAS_ID) {
for (riv in HYRIV_Fraser$HYBAS_L12) {
if (pt == riv) {
pt_vec <- HYBAS_centroids %>%
filter(HYBAS_ID == pt)
riv_vec <- HYRIV_Fraser %>%
filter(HYBAS_L12 == riv)
nrst <- st_nearest_points(pt_vec, riv_vec)
snappy <- st_cast(nrst, "POINT") [2] %>%
as.data.frame() %>%
mutate(HYBAS_ID = pt_vec$HYBAS_ID)
snap_pts <- bind_rows(snap_pts, snappy)
}
}
}
# ESDA (just checking source and snap result)
ggplot()+
geom_sf(data = HYBAS_centroids, colour = 'blue') +
geom_sf(data = snap_pts, colour = 'red')
# At this stage, it is possible to join the other attributes
# As they were removed when loading the data (i.e., select HYBAS_ID)
# Or, alternatively, can be done in a subsequent script
# Data export -------------------------------------------------------------
# Export to geopackage, as sf makes writing shapefile a pain
st_write(HYBAS_centroids, "02_PROCESSED_DATA/HYBAS_Fraser_Centroids.gpkg", append = F )
st_write(snap_pts, "02_PROCESSED_DATA/HYBAS_Fraser_Centroids_Snap.gpkg", append = F)
## set working directory ---------------------------
# Update as needed
setwd("D:/PROJECTS/39_2021_CANADA_F2F_SOURCE2TAP_ACTIVE/02_PROCESSED_DATA")
## general options ---------------------------
options(scipen = 6, digits = 4) # I prefer to view outputs in non-scientific notation
memory.limit(30000000)     # this is needed on some PCs to increase memory allowance
## load libraries ---------------------------
library(riverdist)
library(sf)
library(dplyr, warn.conflicts = F)
library(ggplot2)
# Riverdist sandbox
# Import river network
HR <- line2network(path=".", layer = "HYBAS_Fraser_Network_RD")
# Riverdist sandbox
# Import river network
HR <- line2network(path=".", layer = "HydroRiver_Fraser_RD")
library(tidyverse)
library(sf)
# Save the simplified network in SP format for use in RiverDist
HYRIV_Lite_SP <-as_Spatial(from = HYRIV_Lite)
View(HYRIV_Lite_SP)
st_write(HYRIV_Lite_SP, "02_PROCESSED_DATA/HydroRiver_Fraser_RD.shp", append = F)
library(sp)
library(rgdal)
writeOGR(HYRIV_Lite_SP, "02_PROCESSED_DATA", "HydroRiver_Fraser_RD", driver = "ESRI Shapefile")
writeOGR(HYRIV_Lite_SP, "./02_PROCESSED_DATA", "HydroRiver_Fraser_RD", driver = "ESRI Shapefile")
writeOGR(HYRIV_Lite_SP, past0(getwd(),"/02_PROCESSED_DATA"), "HydroRiver_Fraser_RD", driver = "ESRI Shapefile")
writeOGR(HYRIV_Lite_SP, paste0(getwd(),"/02_PROCESSED_DATA"), "HydroRiver_Fraser_RD", driver = "ESRI Shapefile")
# Update as needed
setwd("D:/PROJECTS/39_2021_CANADA_F2F_SOURCE2TAP_ACTIVE/02_PROCESSED_DATA")
# Riverdist sandbox
# Import river network
HR <- line2network(path=".", layer = "HydroRiver_Fraser_RD")
library(riverdist)
library(sf)
library(dplyr, warn.conflicts = F)
library(ggplot2)
# Riverdist sandbox
# Import river network
HR <- line2network(path=".", layer = "HydroRiver_Fraser_RD")
writeOGR(HYRIV_Lite_SP, paste0(getwd(),"/02_PROCESSED_DATA"), "HydroRiver_Fraser_RD", driver = "ESRI Shapefile")
writeOGR(HYRIV_Lite_SP, getwd(), "HydroRiver_Fraser_RD", driver = "ESRI Shapefile")
# Riverdist sandbox
# Import river network
HR <- line2network(path=".", layer = "HydroRiver_Fraser_RD")
# Convert the simplified network to SP format for use in RiverDist
HYRIV_Lite_SP <- rowid_to_column(HYRIV_Lite, "ID") %>%
as_Spatial(from = HYRIV_Lite)
# Convert the simplified network to SP format for use in RiverDist
HYRIV_Lite_SP <- HYRIV_Lite %>%
mutate(d, ID = row_number()) %>%
as_Spatial(from = HYRIV_Lite)
# Convert the simplified network to SP format for use in RiverDist
HYRIV_Lite_SP <- HYRIV_Lite %>%
mutate(ID = row_number()) %>%
as_Spatial(from = HYRIV_Lite)
# Convert the simplified network to SP format for use in RiverDist
HYRIV_Lite_SP <- HYRIV_Lite %>%
rowid_to_column() %>%
as_Spatial(from = HYRIV_Lite)
View(HYRIV_Lite)
# Convert the simplified network to SP format for use in RiverDist
HYRIV_Lite_SP <- HYRIV_Lite %>%
mutate(ID = row_number())
# Convert the simplified network to SP format for use in RiverDist
HYRIV_Lite_SP <- HYRIV_Lite %>%
mutate(ID = row_number()) %>%
as_Spatial(from = HYRIV_Lite)
HYRIV_Lite_SP <- as_Spatial(from = HYRIV_Lite)
writeOGR(HYRIV_Lite_SP, getwd(), "HydroRiver_Fraser_RD", driver = "ESRI Shapefile") # Version for RiverDist (sp format)
,
writeOGR(HYRIV_Lite_SP, getwd(), "HydroRiver_Fraser_RD", driver = "ESRI Shapefile") # Version for RiverDist (sp format)
HYRIV_Lite_SP <- as_Spatial(from = HYRIV_Lite_ID)
HYRIV_Lite_ID <- HYRIV_Lite %>%
mutate(ID = row_number())
HYRIV_Lite_SP <- as_Spatial(from = HYRIV_Lite_ID)
writeOGR(HYRIV_Lite_SP, getwd(), "HydroRiver_Fraser_RD", driver = "ESRI Shapefile") # Version for RiverDist (sp format)
# Riverdist sandbox
# Import river network
HR <- line2network(path=".", layer = "HydroRiver_Fraser_RD")
plot(x=HR, segmentnum=F)
topologydots(rivers=HR)
