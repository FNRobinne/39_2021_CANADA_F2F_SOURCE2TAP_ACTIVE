# Riverdist sandbox
# Import river network
HR <- line2network(path=".", layer = "02_PROCESSED_DATA/HYBAS_Fraser_Network_Lite")
# Export the simplified river network to a shapefile for use in next step
# Riverdist needs the river network in a shapefile format
st_write(HYRIV_Fraser, "02_PROCESSED_DATA/HydroRiver_Fraser_Lite.shp", append = F)
## ---------------------------
## Script name: RiverNetwork_Simplication.R
##
## Purpose of script: Simplifies the HydroRiver network so it only keeps streams of Strahler order >2,
##                    except in catchments where only order 1 exist—those are kept.
##
## Author: Dr. François-Nicolas Robinne
##
## Date Created: 2021-10-26
##
## Version: 1.0
##
## Copyright (c) François-Nicolas Robinne, 2021
## Email: francois.robinne@nrcan-rncan.gc.ca
##
## ---------------------------
## Notes:
##   This is part of the project Forest To Faucets - Canada
##
## ---------------------------
## set working directory ---------------------------
setwd("D:/PROJECTS/39_2021_CANADA_F2F_SOURCE2TAP_ACTIVE")
## general options ---------------------------
options(scipen = 6, digits = 4) # I prefer to view outputs in non-scientific notation
memory.limit(30000000)     # this is needed on some PCs to increase memory allowance
## load libraries --------------------------------------------------------
library(tidyverse)
library(sf)
# source("functions/packages.R")       # loads up all the packages we need
## load functions --------------------------------------------------------
# source("functions/summarise_data.R")
# Load data ---------------------------------------------------------------
# Note: geometry fixed in QGis prior to loading data
HYBAS_Fraser <- st_read("02_PROCESSED_DATA/HydroBasin_HUC12_Fraser_Fixed.shp") %>%
st_transform(crs = 3979)
HYRIV_Fraser <- st_read("02_PROCESSED_DATA/HydroRiver_Fraser_Fixed.shp") %>%
st_transform(crs = 3979) %>%
select(HYRIV_ID, ORD_STRA, HYBAS_L12)
# Data processing ---------------------------------------------------------
# Separate watersheds that only have Strahler order 1
# Create river layer for watersheds with more than Strahler order 1
HYRIV_Stral2Plus <- HYRIV_Fraser %>%
filter(ORD_STRA > 1) %>%
group_by(HYBAS_L12) %>%
summarise(cnt = n())
# Tabulate difference between original river layer and river layer for watersheds with more than Strahler order 1
Diff_Stral2_Stral1 <- anti_join(st_drop_geometry(HYRIV_Fraser), st_drop_geometry(HYRIV_Stral2Plus)) %>%
group_by(HYBAS_L12) %>%
summarise(cnt = n())
# Use previous step to filter original river layer and filter watersheds with only Strahler order 1
HYRIV_Stral1 <-  HYRIV_Fraser %>%
filter(HYBAS_L12 %in% Diff_Stral2_Stral1$HYBAS_L12)
# Delete all Strahler order 1 in the original dataset and add back the watersheds with order 1 only
HYRIV_Lite <- HYRIV_Fraser %>%
filter(ORD_STRA > 1) %>%
bind_rows(HYRIV_Stral1) %>%
group_by(HYBAS_L12) %>%
summarize()
# ESDA (just checking that process worked)
ggplot() +
geom_sf(data = HYRIV_Lite, colour = "blue") +
geom_sf(data = HYBAS_Fraser, fill = NA)
# Data export -------------------------------------------------------------
# Save clean river network
# Modify destination path as needed
st_write(HYRIV_Lite, "02_PROCESSED_DATA/HydroRiver_Fraser_Lite.gpkg", append = F)
st_write(HYRIV_Lite, "02_PROCESSED_DATA/HydroRiver_Fraser_RD.shp", append = F)
## ---------------------------
## Script name: SnapCatchmentCentroids.R
##
## Purpose of script: Snaps the centroid of each HydroBasin catchment to its corresponding HydroRiver segment
##                    It is essentially a snap-by-attribute tool
##
## Author: Dr. François-Nicolas Robinne
##
## Date Created: 2022-01-07
##
## Version: 1.0
##
## Copyright (c) François-Nicolas Robinne, 2022
## Email: francois.robinne@nrcan-rncan.gc.ca
##
## ---------------------------
## Notes:
##   Starts with the data resulting from 'SimplifyRiverNetwork.R'
##    This is part of the project Forest To Faucets - Canada
## ---------------------------
## set working directory ---------------------------
setwd("D:/PROJECTS/39_2021_CANADA_F2F_SOURCE2TAP_ACTIVE")
## general options ---------------------------
options(scipen = 6, digits = 4) # I prefer to view outputs in non-scientific notation
memory.limit(30000000)     # this is needed on some PCs to increase memory allowance
## load libraries ---------------------------
library(tidyverse)
library(sf)
library(dplyr)
# source("functions/packages.R")       # loads up all the packages we need
## load functions ---------------------------------------------------------
# source("functions/summarise_data.R")
## load data ---------------------------------------------------------------
HYBAS_Fraser <- st_read("02_PROCESSED_DATA/HydroBasin_HUC12_Fraser_Fixed.shp") %>%
st_transform(crs = 3979) %>%
select(HYBAS_ID)
HYRIV_Fraser <- st_read("02_PROCESSED_DATA/HydroRiver_Fraser_Lite.gpkg") # THis is the simplified version of the river network
## Data processing ---------------------------------------------------------
# Create catchment centroids
HYBAS_centroids <- st_centroid(HYBAS_Fraser)
# Creates empty SF to collect results from snap
snap_pts <- HYBAS_centroids %>%
filter(HYBAS_ID == 1) # Dummy filter to get empty structure
# Loop snapping centroids to closest point on the closest river segment
# Process seems convoluted, but st_snap does not return the desired output
# The tool gets the nearest point, casts it, and add the ID of the corresponding HYBAS
for (pt in HYBAS_centroids$HYBAS_ID) {
for (riv in HYRIV_Fraser$HYBAS_L12) {
if (pt == riv) {
pt_vec <- HYBAS_centroids %>%
filter(HYBAS_ID == pt)
riv_vec <- HYRIV_Fraser %>%
filter(HYBAS_L12 == riv)
nrst <- st_nearest_points(pt_vec, riv_vec)
snappy <- st_cast(nrst, "POINT") [2] %>%
as.data.frame() %>%
mutate(HYBAS_ID = pt_vec$HYBAS_ID)
snap_pts <- bind_rows(snap_pts, snappy)
}
}
}
# ESDA (just checking source and snap result)
ggplot()+
geom_sf(data = HYBAS_centroids, colour = 'blue') +
geom_sf(data = snap_pts, colour = 'red')
# At this stage, it is possible to join the other attributes
# As they were removed when loading the data (i.e., select HYBAS_ID)
# Or, alternatively, can be done in a subsequent script
# Data export -------------------------------------------------------------
# Export to geopackage, as sf makes writing shapefile a pain
st_write(HYBAS_centroids, "02_PROCESSED_DATA/HYBAS_Fraser_Centroids.gpkg", append = F )
st_write(snap_pts, "02_PROCESSED_DATA/HYBAS_Fraser_Centroids_Snap.gpkg", append = F)
## set working directory ---------------------------
# Update as needed
setwd("D:/PROJECTS/39_2021_CANADA_F2F_SOURCE2TAP_ACTIVE/02_PROCESSED_DATA")
## general options ---------------------------
options(scipen = 6, digits = 4) # I prefer to view outputs in non-scientific notation
memory.limit(30000000)     # this is needed on some PCs to increase memory allowance
## load libraries ---------------------------
library(riverdist)
library(sf)
library(dplyr, warn.conflicts = F)
library(ggplot2)
# Riverdist sandbox
# Import river network
HR <- line2network(path=".", layer = "HYBAS_Fraser_Network_RD")
# Riverdist sandbox
# Import river network
HR <- line2network(path=".", layer = "HydroRiver_Fraser_RD")
library(tidyverse)
library(sf)
# Save the simplified network in SP format for use in RiverDist
HYRIV_Lite_SP <-as_Spatial(from = HYRIV_Lite)
View(HYRIV_Lite_SP)
st_write(HYRIV_Lite_SP, "02_PROCESSED_DATA/HydroRiver_Fraser_RD.shp", append = F)
library(sp)
library(rgdal)
writeOGR(HYRIV_Lite_SP, "02_PROCESSED_DATA", "HydroRiver_Fraser_RD", driver = "ESRI Shapefile")
writeOGR(HYRIV_Lite_SP, "./02_PROCESSED_DATA", "HydroRiver_Fraser_RD", driver = "ESRI Shapefile")
writeOGR(HYRIV_Lite_SP, past0(getwd(),"/02_PROCESSED_DATA"), "HydroRiver_Fraser_RD", driver = "ESRI Shapefile")
writeOGR(HYRIV_Lite_SP, paste0(getwd(),"/02_PROCESSED_DATA"), "HydroRiver_Fraser_RD", driver = "ESRI Shapefile")
# Update as needed
setwd("D:/PROJECTS/39_2021_CANADA_F2F_SOURCE2TAP_ACTIVE/02_PROCESSED_DATA")
# Riverdist sandbox
# Import river network
HR <- line2network(path=".", layer = "HydroRiver_Fraser_RD")
library(riverdist)
library(sf)
library(dplyr, warn.conflicts = F)
library(ggplot2)
# Riverdist sandbox
# Import river network
HR <- line2network(path=".", layer = "HydroRiver_Fraser_RD")
writeOGR(HYRIV_Lite_SP, paste0(getwd(),"/02_PROCESSED_DATA"), "HydroRiver_Fraser_RD", driver = "ESRI Shapefile")
writeOGR(HYRIV_Lite_SP, getwd(), "HydroRiver_Fraser_RD", driver = "ESRI Shapefile")
# Riverdist sandbox
# Import river network
HR <- line2network(path=".", layer = "HydroRiver_Fraser_RD")
# Convert the simplified network to SP format for use in RiverDist
HYRIV_Lite_SP <- rowid_to_column(HYRIV_Lite, "ID") %>%
as_Spatial(from = HYRIV_Lite)
# Convert the simplified network to SP format for use in RiverDist
HYRIV_Lite_SP <- HYRIV_Lite %>%
mutate(d, ID = row_number()) %>%
as_Spatial(from = HYRIV_Lite)
# Convert the simplified network to SP format for use in RiverDist
HYRIV_Lite_SP <- HYRIV_Lite %>%
mutate(ID = row_number()) %>%
as_Spatial(from = HYRIV_Lite)
# Convert the simplified network to SP format for use in RiverDist
HYRIV_Lite_SP <- HYRIV_Lite %>%
rowid_to_column() %>%
as_Spatial(from = HYRIV_Lite)
View(HYRIV_Lite)
# Convert the simplified network to SP format for use in RiverDist
HYRIV_Lite_SP <- HYRIV_Lite %>%
mutate(ID = row_number())
# Convert the simplified network to SP format for use in RiverDist
HYRIV_Lite_SP <- HYRIV_Lite %>%
mutate(ID = row_number()) %>%
as_Spatial(from = HYRIV_Lite)
HYRIV_Lite_SP <- as_Spatial(from = HYRIV_Lite)
writeOGR(HYRIV_Lite_SP, getwd(), "HydroRiver_Fraser_RD", driver = "ESRI Shapefile") # Version for RiverDist (sp format)
,
writeOGR(HYRIV_Lite_SP, getwd(), "HydroRiver_Fraser_RD", driver = "ESRI Shapefile") # Version for RiverDist (sp format)
HYRIV_Lite_SP <- as_Spatial(from = HYRIV_Lite_ID)
HYRIV_Lite_ID <- HYRIV_Lite %>%
mutate(ID = row_number())
HYRIV_Lite_SP <- as_Spatial(from = HYRIV_Lite_ID)
writeOGR(HYRIV_Lite_SP, getwd(), "HydroRiver_Fraser_RD", driver = "ESRI Shapefile") # Version for RiverDist (sp format)
# Riverdist sandbox
# Import river network
HR <- line2network(path=".", layer = "HydroRiver_Fraser_RD")
plot(x=HR, segmentnum=F)
topologydots(rivers=HR)
View(snappy)
View(snap_pts)
snap_pts_ID <- snap_pts %>%
mutate(ID = row_number())
snap_pts_SP <- as_Spatial(from = snap_pts_ID)
## ---------------------------
## Script name: SnapCatchmentCentroids.R
##
## Purpose of script: Snaps the centroid of each HydroBasin catchment to its corresponding HydroRiver segment
##                    It is essentially a snap-by-attribute tool
##
## Author: Dr. François-Nicolas Robinne
##
## Date Created: 2022-01-07
##
## Version: 1.0
##
## Copyright (c) François-Nicolas Robinne, 2022
## Email: francois.robinne@nrcan-rncan.gc.ca
##
## ---------------------------
## Notes:
##   Starts with the data resulting from 'SimplifyRiverNetwork.R'
##    This is part of the project Forest To Faucets - Canada
## ---------------------------
## set working directory ---------------------------
setwd("D:/PROJECTS/39_2021_CANADA_F2F_SOURCE2TAP_ACTIVE")
## general options ---------------------------
options(scipen = 6, digits = 4) # I prefer to view outputs in non-scientific notation
memory.limit(30000000)     # this is needed on some PCs to increase memory allowance
## load libraries ---------------------------
library(tidyverse)
library(sf)
library(dplyr)
# source("functions/packages.R")       # loads up all the packages we need
## load functions ---------------------------------------------------------
# source("functions/summarise_data.R")
## load data ---------------------------------------------------------------
HYBAS_Fraser <- st_read("02_PROCESSED_DATA/HydroBasin_HUC12_Fraser_Fixed.shp") %>%
st_transform(crs = 3979) %>%
select(HYBAS_ID)
HYRIV_Fraser <- st_read("02_PROCESSED_DATA/HydroRiver_Fraser_Lite.gpkg") # THis is the simplified version of the river network
## Data processing ---------------------------------------------------------
# Create catchment centroids
HYBAS_centroids <- st_centroid(HYBAS_Fraser)
# Creates empty SF to collect results from snap
snap_pts <- HYBAS_centroids %>%
filter(HYBAS_ID == 1) # Dummy filter to get empty structure
# Loop snapping centroids to closest point on the closest river segment
# Process seems convoluted, but st_snap does not return the desired output
# The tool gets the nearest point, casts it, and add the ID of the corresponding HYBAS
for (pt in HYBAS_centroids$HYBAS_ID) {
for (riv in HYRIV_Fraser$HYBAS_L12) {
if (pt == riv) {
pt_vec <- HYBAS_centroids %>%
filter(HYBAS_ID == pt)
riv_vec <- HYRIV_Fraser %>%
filter(HYBAS_L12 == riv)
nrst <- st_nearest_points(pt_vec, riv_vec)
snappy <- st_cast(nrst, "POINT") [2] %>%
as.data.frame() %>%
mutate(HYBAS_ID = pt_vec$HYBAS_ID)
snap_pts <- bind_rows(snap_pts, snappy)
}
}
}
# ESDA (just checking source and snap result)
ggplot()+
geom_sf(data = HYBAS_centroids, colour = 'blue') +
geom_sf(data = snap_pts, colour = 'red')
# Convert the centroids to SP format for use in RiverDist
snap_pts_ID <- snap_pts %>%
mutate(ID = row_number())
snap_pts_SP <- as_Spatial(from = snap_pts_ID)
# At this stage, it is possible to join the other attributes
# As they were removed when loading the data (i.e., select HYBAS_ID)
# Or, alternatively, can be done in a subsequent script
# Data export -------------------------------------------------------------
# Export to geopackage, as sf makes writing shapefile a pain
st_write(HYBAS_centroids, "02_PROCESSED_DATA/HYBAS_Fraser_Centroids.gpkg", append = F )
st_write(snap_pts, "02_PROCESSED_DATA/HYBAS_Fraser_Centroids_Snap.gpkg", append = F)
writeOGR(snap_pts_SP, getwd(), "Centroids_Fraser_RD", driver = "ESRI Shapefile") # Version for RiverDist (sp format)
library(rgdal)
writeOGR(snap_pts_SP, getwd(), "Centroids_Fraser_RD", driver = "ESRI Shapefile") # Version for RiverDist (sp format)
# Update as needed
setwd("D:/PROJECTS/39_2021_CANADA_F2F_SOURCE2TAP_ACTIVE/02_PROCESSED_DATA")
## general options ---------------------------
options(scipen = 6, digits = 4) # I prefer to view outputs in non-scientific notation
memory.limit(30000000)     # this is needed on some PCs to increase memory allowance
## load libraries ---------------------------
library(riverdist)
library(sf)
library(dplyr, warn.conflicts = F)
library(ggplot2)
# source("functions/packages.R")       # loads up all the packages we need
## load functions ---------------------------
# source("functions/summarise_data.R")
## load data ---------------------------
## Data processing ---------------------------------------------------------
# Riverdist sandbox
# Import river network
HR <- line2network(path=".", layer = "HydroRiver_Fraser_RD")
plot(x=HR, segmentnum=F)
# Import
segvert_Pop <- pointshp2segvert(path=".",layer="Centroids_Fraser_RD.shp", rivers=HR)
View(snap_pts_SP)
snap_pts_SP <- as_Spatial(from = snap_pts_ID)
writeOGR(snap_pts_SP, getwd(), "Centroids_Fraser_RD", driver = "ESRI Shapefile") # Version for RiverDist (sp format)
writeOGR(snap_pts_SP, getwd(), "Centroids_Fraser_RD", driver = "ESRI Shapefile") # Version for RiverDist (sp format)
# Import
segvert_Pop <- pointshp2segvert(path=".",layer="Centroids_Fraser_RD.shp", rivers=HR)
View(snap_pts_ID)
setwd("D:/PROJECTS/39_2021_CANADA_F2F_SOURCE2TAP_ACTIVE/02_PROCESSED_DATA")
## general options ---------------------------
options(scipen = 6, digits = 4) # I prefer to view outputs in non-scientific notation
memory.limit(30000000)     # this is needed on some PCs to increase memory allowance
## load libraries ---------------------------
library(riverdist)
library(sf)
library(dplyr, warn.conflicts = F)
library(ggplot2)
# Riverdist sandbox
# Import river network
HR <- line2network(path=".", layer = "HydroRiver_Fraser_RD")
# Import
segvert_Pop <- pointshp2segvert(path=".",layer="Centroids_Fraser_RD.shp", rivers=HR)
# Import
segvert_Pop <- pointshp2segvert(path=".",layer="Centroids_Fraser_RDQ.shp", rivers=HR)
# Import
segvert_Pop <- pointshp2segvert(path=".",layer="Centroids_Fraser_RD", rivers=HR)
hist(segvert_Pop$snapdist, main = "snapping distance (m)")
View(segvert_Pop)
View(segvert_Pop)
View(segvert_Pop)
View(pointshp2segvert())
view(pointshp2segvert())
View(pointshp2segvert
)
View(xy2segvert)
View(segvert_Pop)
View(segvert_Pop)
segvert_Pop %>%
select(snapdist >= 1000)
cnt_seg <- segvert_Pop$snapdist >= 1000
as_tibble(segvert_Pop) %>%
select(snapdist >= 1000)
segvert_Pop_tib <- tibble(segvert_Pop)
segvert_Pop_tib_sub <- filter(snapdist >= 1000)
segvert_Pop_tib_sub <- select(snapdist >= 1000)
library(dplyr, warn.conflicts = F)
segvert_Pop_tib_sub <- segvert_Pop_tib %>%select(snapdist >= 1000)
segvert_Pop_tib_sub <- segvert_Pop_tib %>% select(snapdist >= 1000)
View(segvert_Pop_tib)
View(segvert_Pop)
segvert_Pop_tib_sub <- segvert_Pop_tib %>%
filter(snapdist >= 1000
)
segvert_Pop_tib_sub <- segvert_Pop_tib %>%
filter(snapdist >= 500)
# Densify the river network to avoid long snaps in lake segments
HR_dense <- addverts(HR, mindist = 500)
# Import
segvert_Pop <- pointshp2segvert(path=".",layer="Centroids_Fraser_RD", rivers=HR_dense)
hist(segvert_Pop$snapdist, main = "snapping distance (m)")
zoomtoseg(seg=c(1,15), rivers=HR_dense)
zoomtoseg(seg=c(1), rivers=HR_dense)
zoomtoseg(seg=c(1,4), rivers=HR_dense)
# Distance computation
# First, let's find the end segment (i.e., furthest downstream)
# At the moment, that's manually iterative (i.e., change seg values with in functions below)
# Segment 1 will not necessarily always be the outlet segment
showends(seg=1, rivers =HR_dense) # Here, segment 1 is the end one
zoomtoseg(seg=c(1,4), rivers=HR_dense)
# Second, set mouth of the network
HR1 <- setmouth(seg=1, vert=1, rivers = HR_dense)
HR1 <- buildsegroutes(HR1)
install.packages("coinr")
install.packages("COINr")
install.packages("exactextractR")
install.packages("exactextractr")
HUC12 <- st_read()
library(tidyverse)
library(sf)
library(terra)
library(exactextractr)
HUC12 <- st_read("HydroBasin_HUC12_Fraser_Fixed.shp")
Intakes <- st_read("Canada_Municipal_Surface_Intake_V4_28102021.gpkg")
View(HUC12)
# Update as needed
setwd("D:/PROJECTS/39_2021_CANADA_F2F_SOURCE2TAP_ACTIVE/01_RAW_DATA")
CanTreeCover <- rast("NRCAN/NFI_MODIS250m_kNN_LandCover_VegTreed_v0.tif")
plot(CanTreeCover)
# Beware of CRS => make sure it is the same for all data
HUC12 <- st_read("HydroBasin_HUC12_Fraser_Fixed.shp") %>%
st_transform(crs = 3979)
# Beware of CRS => make sure it is the same for all data
HUC12 <- st_read("HydroBasin_HUC12_Fraser_Fixed.shp") %>%
st_transform(crs = 3979)
# Update as needed
setwd("D:/PROJECTS/39_2021_CANADA_F2F_SOURCE2TAP_ACTIVE")
# Beware of CRS => make sure it is the same for all data
HUC12 <- st_read("02_PROCESSED_DATA/NRCAN/HydroBasin_HUC12_Fraser_Fixed.shp") %>%
st_transform(crs = 3979)
# Update as needed
setwd("D:/PROJECTS/39_2021_CANADA_F2F_SOURCE2TAP_ACTIVE")
# Beware of CRS => make sure it is the same for all data
HUC12 <- st_read("02_PROCESSED_DATA/NRCAN/HydroBasin_HUC12_Fraser_Fixed.shp") %>%
st_transform(crs = 3979)
# Beware of CRS => make sure it is the same for all data
HUC12 <- st_read("02_PROCESSED_DATA/HydroBasin_HUC12_Fraser_Fixed.shp") %>%
st_transform(crs = 3979)
Intakes <- st_read("02_PROCESSED_DATA/Canada_Municipal_Surface_Intake_V4_28102021.gpkg")
crs(HUC12)
CanTreeCover <- rast("01_RAW_DATA/NRCAN/NFI_MODIS250m_kNN_LandCover_VegTreed_v0.tif")
crs(CanTreeCover)
CanTreeCoverEPSG3979 <- warp(CanTreeCover, crs = 3979)
CanTreeCoverEPSG3979 <- project(CanTreeCover, crs = 3979)
CanTreeCoverEPSG3979 <- project(x = CanTreeCover, y = "epsg:3979")
# Raster data extraction/summary per HUC12
HUC12_ForCov <- exact_extract(CanTreeCover, HUC12, 'sum', progress = F)
View(HUC12)
HUC12_ForCov
# Raster data extraction/summary per HUC12
HUC12_ForCov <- exact_extract(CanTreeCoverEPSG3979, HUC12, 'sum', progress = F)
# Raster data extraction/summary per HUC12
HUC12_ForCov <- exact_extract(CanTreeCoverEPSG3979, HUC12, 'sum', progress = F, append_col = 'HYBAS_ID')
# Raster data extraction/summary per HUC12
HUC12_ForCov <- exact_extract(CanTreeCoverEPSG3979, HUC12, 'sum', progress = F, append_cols = 'HYBAS_ID')
View(HUC12_ForCov)
# Raster data extraction/summary per HUC12
HUC12_ForCov <- exact_extract(CanTreeCoverEPSG3979, HUC12, 'sum', progress = F, append_cols = [1:10])
# Raster data extraction/summary per HUC12
HUC12_ForCov <- exact_extract(CanTreeCoverEPSG3979, HUC12, 'sum', progress = F, append_cols = c('HYBAS_ID', 'NEXT_DOWN'))
View(HUC12)
View(HUC12)
plot(st_geometry(HUC12))
# Raster data extraction/summary per HUC12
HUC12_ForCov <- exact_extract(CanTreeCoverEPSG3979, HUC12, 'sum', progress = F, append_cols = c('HYBAS_ID', 'geometry'))
View(HUC12_ForCov)
plot(st_geometry(HUC12_ForCov))
plot(st_geometry(as_sf(HUC12_ForCov)))
plot(st_geometry(st_as_sf(HUC12_ForCov)))
# Raster data extraction/summary per HUC12
HUC12_ForCov <- exact_extract(CanTreeCoverEPSG3979, HUC12, 'sum',
progress = F, append_cols = c('HYBAS_ID')) %>%
rename(forcov = sum)
HUC12 <- HUC12 %>%
right_join(HUC12_ForCov)
View(HUC12)
plot(st_geometry(HUC12_ForCov))
plot(st_geometry(HUC12$forcov))
ggplot() +
ggplot(HUC12) +
geom_sf(forcov, color = 'green')
ggplot(HUC12) +
geom_sf(data=forcov, colour = 'green')
ggplot() +
geom_sf(data=HUC$forcov, colour = 'green')
ggplot() +
geom_sf(data=HUC12$forcov, colour = 'green')
ggplot(HUC12) +
geom_sf(aes(fill = forcov))
View(HUC12)
# Riverdist sandbox
# Import river network
HR <- line2network(path=".", layer = "HydroRiver_Fraser_RD")
setwd("D:/PROJECTS/39_2021_CANADA_F2F_SOURCE2TAP_ACTIVE/02_PROCESSED_DATA")
## general options ---------------------------
options(scipen = 6, digits = 4) # I prefer to view outputs in non-scientific notation
memory.limit(30000000)     # this is needed on some PCs to increase memory allowance
## load libraries ---------------------------
library(riverdist)
library(sf)
library(dplyr, warn.conflicts = F)
library(ggplot2)
# Riverdist sandbox
# Import river network
HR <- line2network(path=".", layer = "HydroRiver_Fraser_RD")
# Import
segvert_Pop <- pointshp2segvert(path=".",layer="Centroids_Fraser_RD", rivers=HR_dense)
# Second, set mouth of the network
HR1 <- setmouth(seg=1, vert=1, rivers = HR)
HR1 <- buildsegroutes(HR1)
View(HR)
